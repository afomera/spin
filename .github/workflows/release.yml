name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Import Code-Signing Certificates
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

          echo "Available certificates:"
          security find-identity -v -p codesigning build.keychain

      - name: Install gon for notarization
        run: |
          brew install mitchellh/gon/gon

      - name: Create gon config
        run: |
          cat > gon.json << EOF
          {
            "source": ["dist/spin_darwin_amd64/spin", "dist/spin_darwin_arm64/spin"],
            "bundle_id": "com.afomera.spin",
            "apple_id": {
              "username": "${{ secrets.APPLE_ID }}",
              "password": "${{ secrets.APPLE_ID_PASSWORD }}"
            },
            "sign": {
              "application_identity": "${{ secrets.CERTIFICATE_NAME }}"
            },
            "zip": {
              "output_path": "dist/spin_notarized.zip"
            },
            "notarize": {
              "path": "dist/spin_notarized.zip",
              "bundle_id": "com.afomera.spin",
              "staple": true
            }
          }
          EOF

      - name: Create entitlements.plist
        run: |
          cat > entitlements.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
          </dict>
          </plist>
          EOF

      - name: Build binaries
        run: |
          mkdir -p dist
          PLATFORMS="linux/amd64 linux/arm64 darwin/amd64 darwin/arm64 windows/amd64"
          for platform in $PLATFORMS; do
            OS=${platform%/*}
            ARCH=${platform#*/}
            output_name="spin"
            if [ "$OS" = "windows" ]; then
              output_name="spin.exe"
            fi
            echo "Building for $OS/$ARCH..."
            mkdir -p "dist/spin_${OS}_${ARCH}"
            GOOS=$OS GOARCH=$ARCH go build -o "dist/spin_${OS}_${ARCH}/$output_name" .
          done

      - name: Sign and Notarize macOS binaries
        run: |
          echo "Certificates available for signing:"
          security find-identity -v -p codesigning build.keychain

          echo "Attempting to sign and notarize..."
          gon gon.json

          # Extract notarized binaries and create final archives
          unzip -o dist/spin_notarized.zip -d dist/notarized/
          cp dist/notarized/spin "dist/spin_darwin_amd64/spin"
          cp dist/notarized/spin "dist/spin_darwin_arm64/spin"

          # Create archives with notarized binaries
          (cd "dist/spin_darwin_amd64" && tar czf "../spin_darwin_amd64.tar.gz" "spin")
          (cd "dist/spin_darwin_arm64" && tar czf "../spin_darwin_arm64.tar.gz" "spin")

      - name: Create other platform archives
        run: |
          # Create archives for Linux and Windows
          (cd "dist/spin_linux_amd64" && tar czf "../spin_linux_amd64.tar.gz" "spin")
          (cd "dist/spin_linux_arm64" && tar czf "../spin_linux_arm64.tar.gz" "spin")
          (cd "dist/spin_windows_amd64" && zip "../spin_windows_amd64.zip" "spin.exe")

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Contents of dist directory:"
          ls -la dist/

          # Upload all release assets
          for file in dist/spin_*.{tar.gz,zip}; do
            if [ -f "$file" ]; then
              echo "Uploading $file..."
              gh release upload "v${{ github.run_number }}" "$file"
            fi
          done
