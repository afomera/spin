name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Install jq
        run: brew install jq

      - name: Import Code-Signing Certificates
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo "Creating keychain..."
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

          echo "Decoding certificate..."
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12

          echo "Certificate file size:"
          ls -l certificate.p12

          echo "Importing certificate..."
          security import certificate.p12 \
            -k build.keychain \
            -f pkcs12 \
            -P "$APPLE_CERTIFICATE_PASSWORD" \
            -T /usr/bin/codesign

          echo "Setting key partition list..."
          security set-key-partition-list \
            -S apple-tool:,apple:,codesign: \
            -s \
            -k "$KEYCHAIN_PASSWORD" \
            build.keychain

          echo "Available certificates:"
          security find-identity -v -p codesigning build.keychain

      - name: Create entitlements.plist
        run: |
          cat > entitlements.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
              <key>com.apple.security.get-task-allow</key>
              <true/>
              <key>com.apple.security.cs.debugger</key>
              <true/>
              <key>com.apple.security.cs.allow-dyld-environment-variables</key>
              <true/>
          </dict>
          </plist>
          EOF

      - name: Build binaries
        run: |
          mkdir -p dist
          PLATFORMS="linux/amd64 linux/arm64 darwin/amd64 darwin/arm64 windows/amd64"
          for platform in $PLATFORMS; do
            OS=${platform%/*}
            ARCH=${platform#*/}
            output_name="spin"
            if [ "$OS" = "windows" ]; then
              output_name="spin.exe"
            fi
            echo "Building for $OS/$ARCH..."
            mkdir -p "dist/spin_${OS}_${ARCH}"
            GOOS=$OS GOARCH=$ARCH go build -o "dist/spin_${OS}_${ARCH}/$output_name" .
          done

      - name: Sign and Notarize macOS binaries
        env:
          CERTIFICATE_NAME: ${{ secrets.CERTIFICATE_NAME }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        run: |
          echo "Signing binaries..."
          for arch in "amd64" "arm64"; do
            echo "Processing darwin_$arch..."
            
            echo "Available certificates before signing:"
            security find-identity -v -p codesigning build.keychain
            
            # Sign the binary with hardened runtime
            codesign --force -s "$CERTIFICATE_NAME" \
              --timestamp \
              --options runtime \
              --entitlements entitlements.plist \
              --prefix com.afomera. \
              -v "dist/spin_darwin_$arch/spin"
            
            # Verify signing
            codesign -vv --deep --strict "dist/spin_darwin_$arch/spin"
            
            # Create zip for notarization
            ditto -c -k --keepParent "dist/spin_darwin_$arch" "dist/spin_darwin_$arch.zip"
            
            echo "Notarizing darwin_$arch..."
            submission_id=$(xcrun notarytool submit "dist/spin_darwin_$arch.zip" \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_ID_PASSWORD" \
              --team-id "$APPLE_TEAM_ID" \
              --wait \
              --verbose 2>&1 | grep "id:" | head -n1 | awk '{print $2}')
            
            if [ -n "$submission_id" ]; then
              echo "Getting notarization log for $submission_id..."
              xcrun notarytool log \
                --apple-id "$APPLE_ID" \
                --password "$APPLE_ID_PASSWORD" \
                --team-id "$APPLE_TEAM_ID" \
                "$submission_id" notarization.log
              
              echo "Notarization log contents:"
              cat notarization.log
              
              # Check if notarization succeeded using jq
              if [ "$(jq -r .status notarization.log)" = "Accepted" ]; then
                echo "Notarization succeeded, waiting for processing..."
                # Wait for notarization to be fully processed
                sleep 30
                
                # Try stapling up to 3 times
                max_attempts=3
                attempt=1
                while [ $attempt -le $max_attempts ]; do
                  echo "Attempting to staple (attempt $attempt of $max_attempts)..."
                  if xcrun stapler staple "dist/spin_darwin_$arch/spin"; then
                    echo "Stapling succeeded!"
                    break
                  else
                    if [ $attempt -eq $max_attempts ]; then
                      echo "All stapling attempts failed"
                      exit 1
                    fi
                    echo "Stapling failed, waiting before retry..."
                    sleep 30
                    attempt=$((attempt + 1))
                  fi
                done
              else
                echo "Notarization failed"
                cat notarization.log
                exit 1
              fi
            else
              echo "Failed to get submission ID"
              exit 1
            fi
          done

          echo "Creating final archives..."
          for arch in "amd64" "arm64"; do
            (cd "dist/spin_darwin_$arch" && tar czf "../spin_darwin_$arch.tar.gz" "spin")
          done

      - name: Create other platform archives
        run: |
          # Create archives for Linux and Windows
          (cd "dist/spin_linux_amd64" && tar czf "../spin_linux_amd64.tar.gz" "spin")
          (cd "dist/spin_linux_arm64" && tar czf "../spin_linux_arm64.tar.gz" "spin")
          (cd "dist/spin_windows_amd64" && zip "../spin_windows_amd64.zip" "spin.exe")

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Contents of dist directory:"
          ls -la dist/

          # Upload all release assets
          for file in dist/spin_*.{tar.gz,zip}; do
            if [ -f "$file" ]; then
              echo "Uploading $file..."
              gh release upload "v${{ github.run_number }}" "$file"
            fi
          done
